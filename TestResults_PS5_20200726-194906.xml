<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="3217" errors="0" failures="418" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2020-07-26" time="19:52:39">
  <environment user="Andrew.Smith" machine-name="ANDREWS-XPS" cwd="C:\Andrew\Work\Me\PSDokuWiki" user-domain="ROCKS" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition3" nunit-version="2.5.8.0" os-version="10.0.19041" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-GB" current-uiculture="en-US" />
  <test-suite type="Powershell" name="Pester" executed="True" result="Failure" success="False" time="209.8533" asserts="0">
    <results>
      <test-suite type="TestFixture" name="Add-DokuAclRule" executed="True" result="Failure" success="False" time="5.982" asserts="0" description="Add-DokuAclRule">
        <results>
          <test-case description="Should display the exception message" name="Add-DokuAclRule.Should display the exception message" time="5.0928" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Add-DokuAclRule.Should display the fault code &amp; string" time="0.2526" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should identify if the method call failed" name="Add-DokuAclRule.Should identify if the method call failed" time="0.119" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should make one call to Invoke-DokuApiCall" name="Add-DokuAclRule.Should make one call to Invoke-DokuApiCall" time="0.1665" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should make one call to Invoke-DokuApiCall" name="Add-DokuAclRule.Should make one call to Invoke-DokuApiCall" time="0.1108" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should make two calls to Invoke-DokuApiCall" name="Add-DokuAclRule.Should make two calls to Invoke-DokuApiCall" time="0.0899" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should make four calls to Invoke-DokuApiCall" name="Add-DokuAclRule.Should make four calls to Invoke-DokuApiCall" time="0.1504" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Add-DokuPageData" executed="True" result="Failure" success="False" time="1.173" asserts="0" description="Add-DokuPageData">
        <results>
          <test-case description="Should display the exception message" name="Add-DokuPageData.Should display the exception message" time="0.2152" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Add-DokuPageData.Should display the fault code &amp; string" time="0.1255" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Add-DokuPageData.Should return an object with all properties defined" time="0.1772" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Add-DokuPageData.Should return an object with the correct value for FullName" time="0.1001" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for AddedText" name="Add-DokuPageData.Should return an object with the correct value for AddedText" time="0.1008" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for MinorChange" name="Add-DokuPageData.Should return an object with the correct value for MinorChange" time="0.1035" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for SummaryText" name="Add-DokuPageData.Should return an object with the correct value for SummaryText" time="0.0846" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Add-DokuPageData.Should return an object with the correct value for PageName" time="0.0842" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Add-DokuPageData.Should return an object with the correct value for ParentNamespace" time="0.0814" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Add-DokuPageData.Should return an object with the correct value for RootNamespace" time="0.1005" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Connect-DokuServer" executed="True" result="Failure" success="False" time="1.2732" asserts="0" description="Connect-DokuServer">
        <results>
          <test-case description="Should fail when specifying a non-existent server" name="Connect-DokuServer.Should fail when specifying a non-existent server" time="0.1917" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail when server is $null" name="Connect-DokuServer.Should fail when server is $null" time="0.1142" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail when already connected and force isnt specified" name="Connect-DokuServer.Should fail when already connected and force isnt specified" time="0.0952" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail when invalid XML is returned" name="Connect-DokuServer.Should fail when invalid XML is returned" time="0.1178" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct primary type name" name="Connect-DokuServer.Should return an object with the correct primary type name" time="0.2189" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all the correct properties" name="Connect-DokuServer.Should return an object with all the correct properties" time="0.1399" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should detect if a non-XML response was received" name="Connect-DokuServer.Should detect if a non-XML response was received" time="0.1621" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should detect a fault in the login" name="Connect-DokuServer.Should detect a fault in the login" time="0.1165" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should detect an invalid XML response" name="Connect-DokuServer.Should detect an invalid XML response" time="0.1167" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="ConvertTo-XmlRpcMethodCall" executed="True" result="Failure" success="False" time="0.5427" asserts="0" description="ConvertTo-XmlRpcMethodCall">
        <results>
          <test-case description="Should work for methods with no params" name="ConvertTo-XmlRpcMethodCall.Should work for methods with no params" time="0.1646" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should work for methods with one (string) parameter" name="ConvertTo-XmlRpcMethodCall.Should work for methods with one (string) parameter" time="0.0856" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should work for methods with two parameters" name="ConvertTo-XmlRpcMethodCall.Should work for methods with two parameters" time="0.1111" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail for empty methods" name="ConvertTo-XmlRpcMethodCall.Should fail for empty methods" time="0.0989" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail for null methods" name="ConvertTo-XmlRpcMethodCall.Should fail for null methods" time="0.0824" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="ConvertTo-XmlRpcType" executed="True" result="Failure" success="False" time="1.7738" asserts="0" description="ConvertTo-XmlRpcType">
        <results>
          <test-case description="Should convert strings with single quotes" name="ConvertTo-XmlRpcType.Should convert strings with single quotes" time="0.1679" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert strings with double quotes" name="ConvertTo-XmlRpcType.Should convert strings with double quotes" time="0.1108" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert strings with a length in a multiple of 4" name="ConvertTo-XmlRpcType.Should convert strings with a length in a multiple of 4" time="0.1146" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert bytes into Base64" name="ConvertTo-XmlRpcType.Should convert bytes into Base64" time="0.1273" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert Booleans" name="ConvertTo-XmlRpcType.Should convert Booleans" time="0.0868" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert SwitchParameters" name="ConvertTo-XmlRpcType.Should convert SwitchParameters" time="0.0933" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert Doubles" name="ConvertTo-XmlRpcType.Should convert Doubles" time="0.0929" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert Int16" name="ConvertTo-XmlRpcType.Should convert Int16" time="0.0827" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert Int32" name="ConvertTo-XmlRpcType.Should convert Int32" time="0.088" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert Int64" name="ConvertTo-XmlRpcType.Should convert Int64" time="0.0816" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert DateTime" name="ConvertTo-XmlRpcType.Should convert DateTime" time="0.0808" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert array" name="ConvertTo-XmlRpcType.Should convert array" time="0.0938" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert hashtables" name="ConvertTo-XmlRpcType.Should convert hashtables" time="0.0837" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert XML" name="ConvertTo-XmlRpcType.Should convert XML" time="0.1062" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert mixed data" name="ConvertTo-XmlRpcType.Should convert mixed data" time="0.104" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert NULL" name="ConvertTo-XmlRpcType.Should convert NULL" time="0.0762" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert PSObjects" name="ConvertTo-XmlRpcType.Should convert PSObjects" time="0.0869" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should convert PSCustomObjects" name="ConvertTo-XmlRpcType.Should convert PSCustomObjects" time="0.0963" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Disconnect-DokuServer" executed="True" result="Failure" success="False" time="0.2822" asserts="0" description="Disconnect-DokuServer">
        <results>
          <test-case description="Should nullify the variable correctly" name="Disconnect-DokuServer.Should nullify the variable correctly" time="0.1656" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should do nothing if not connected" name="Disconnect-DokuServer.Should do nothing if not connected" time="0.1166" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuAllPage" executed="True" result="Failure" success="False" time="1.0729" asserts="0" description="Get-DokuAllPage">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuAllPage.Should display the exception message" time="0.1715" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuAllPage.Should display the fault code &amp; string" time="0.085" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuAllPage.Should return an object with all properties defined" time="0.1384" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuAllPage.Should return an object with the correct value for FullName" time="0.085" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Acl" name="Get-DokuAllPage.Should return an object with the correct value for Acl" time="0.0859" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuAllPage.Should return an object with the correct value for Size" time="0.0806" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuAllPage.Should return an object with the correct value for LastModified" time="0.0858" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModifiedRaw" name="Get-DokuAllPage.Should return an object with the correct value for LastModifiedRaw" time="0.083" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuAllPage.Should return an object with the correct value for ParentNamespace" time="0.0885" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuAllPage.Should return an object with the correct value for RootNamespace" time="0.0789" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Pagename" name="Get-DokuAllPage.Should return an object with the correct value for Pagename" time="0.0904" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuAttachmentInfo" executed="True" result="Failure" success="False" time="0.9194" asserts="0" description="Get-DokuAttachmentInfo">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuAttachmentInfo.Should display the exception message" time="0.1641" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuAttachmentInfo.Should display the fault code &amp; string" time="0.0909" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuAttachmentInfo.Should return an object with all properties defined" time="0.1448" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuAttachmentInfo.Should return an object with the correct value for FullName" time="0.0854" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FileName" name="Get-DokuAttachmentInfo.Should return an object with the correct value for FileName" time="0.0818" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuAttachmentInfo.Should return an object with the correct value for Size" time="0.0942" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuAttachmentInfo.Should return an object with the correct value for LastModified" time="0.0918" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuAttachmentInfo.Should return an object with the correct value for ParentNamespace" time="0.0835" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuAttachmentInfo.Should return an object with the correct value for RootNamespace" time="0.0828" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuAttachmentList" executed="True" result="Failure" success="False" time="2.024" asserts="0" description="Get-DokuAttachmentList">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuAttachmentList.Should display the exception message" time="0.1867" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuAttachmentList.Should display the fault code &amp; string" time="0.0928" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuAttachmentList.Should return an object with all properties defined" time="0.1433" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuAttachmentList.Should return an object with the correct value for FullName" time="0.0835" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Name" name="Get-DokuAttachmentList.Should return an object with the correct value for Name" time="0.0827" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuAttachmentList.Should return an object with the correct value for Size" time="0.081" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IsWritable" name="Get-DokuAttachmentList.Should return an object with the correct value for IsWritable" time="0.0862" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IsImage" name="Get-DokuAttachmentList.Should return an object with the correct value for IsImage" time="0.0811" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuAttachmentList.Should return an object with the correct value for LastModified" time="0.0884" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuAttachmentList.Should return an object with the correct value for VersionTimestamp" time="0.0823" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuAttachmentList.Should return an object with the correct value for ParentNamespace" time="0.0848" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuAttachmentList.Should return an object with the correct value for RootNamespace" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return objects with all properties defined" name="Get-DokuAttachmentList.Should return objects with all properties defined" time="0.1364" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuAttachmentList.Should return an object with the correct value for FullName" time="0.0809" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Name" name="Get-DokuAttachmentList.Should return an object with the correct value for Name" time="0.0846" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuAttachmentList.Should return an object with the correct value for Size" time="0.0863" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IsWritable" name="Get-DokuAttachmentList.Should return an object with the correct value for IsWritable" time="0.0783" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IsImage" name="Get-DokuAttachmentList.Should return an object with the correct value for IsImage" time="0.0731" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuAttachmentList.Should return an object with the correct value for LastModified" time="0.0768" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuAttachmentList.Should return an object with the correct value for VersionTimestamp" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuAttachmentList.Should return an object with the correct value for ParentNamespace" time="0.0771" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuAttachmentList.Should return an object with the correct value for RootNamespace" time="0.0822" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageAcl" executed="True" result="Failure" success="False" time="0.7867" asserts="0" description="Get-DokuPageAcl">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageAcl.Should display the exception message" time="0.1658" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageAcl.Should display the fault code &amp; string" time="0.0873" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageAcl.Should return an object with all properties defined" time="0.1345" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageAcl.Should return an object with the correct value for FullName" time="0.0733" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageAcl.Should return an object with the correct value for PageName" time="0.0761" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Acl" name="Get-DokuPageAcl.Should return an object with the correct value for Acl" time="0.0832" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageAcl.Should return an object with the correct value for ParentNamespace" time="0.0843" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageAcl.Should return an object with the correct value for RootNamespace" time="0.0823" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageBackLink" executed="True" result="Failure" success="False" time="1.1346" asserts="0" description="Get-DokuPageBackLink">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageBackLink.Should display the exception message" time="0.1649" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageBackLink.Should display the fault code &amp; string" time="0.0859" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageBackLink.Should return an object with all properties defined" time="0.1324" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageBackLink.Should return an object with the correct value for FullName" time="0.0782" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageBackLink.Should return an object with the correct value for PageName" time="0.0743" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageBackLink.Should return an object with the correct value for ParentNamespace" time="0.0784" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageBackLink.Should return an object with the correct value for RootNamespace" time="0.077" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageBackLink.Should return an object with all properties defined" time="0.1304" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageBackLink.Should return an object with the correct value for FullName" time="0.0811" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageBackLink.Should return an object with the correct value for PageName" time="0.0815" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageBackLink.Should return an object with the correct value for ParentNamespace" time="0.0772" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageBackLink.Should return an object with the correct value for RootNamespace" time="0.0731" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageData" executed="True" result="Failure" success="False" time="1.6824" asserts="0" description="Get-DokuPageData">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageData.Should display the exception message" time="0.1647" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageData.Should display the fault code &amp; string" time="0.0834" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageData.Should return an object with all properties defined" time="0.1334" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for TimeChecked" name="Get-DokuPageData.Should return an object with the correct value for TimeChecked" time="0.0772" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeGreaterThan' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageData.Should return an object with the correct value for FullName" time="0.0822" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RawText" name="Get-DokuPageData.Should return an object with the correct value for RawText" time="0.0772" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageData.Should return an object with the correct value for PageName" time="0.0763" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageData.Should return an object with the correct value for ParentNamespace" time="0.0864" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageData.Should return an object with the correct value for RootNamespace" time="0.0725" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageData.Should return an object with all properties defined" time="0.1278" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for TimeChecked" name="Get-DokuPageData.Should return an object with the correct value for TimeChecked" time="0.0895" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeGreaterThan' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageData.Should return an object with the correct value for FullName" time="0.0804" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RawText" name="Get-DokuPageData.Should return an object with the correct value for RawText" time="0.0831" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageData.Should return an object with the correct value for PageName" time="0.0731" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageData.Should return an object with the correct value for ParentNamespace" time="0.0731" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageData.Should return an object with the correct value for RootNamespace" time="0.0799" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageData.Should call Invoke-DokuApiCall twice" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return a string" name="Get-DokuPageData.Should return a string" time="0.1045" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeOfType' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return the raw page data" name="Get-DokuPageData.Should return the raw page data" time="0.0815" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageHtml" executed="True" result="Failure" success="False" time="1.5506" asserts="0" description="Get-DokuPageHtml">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageHtml.Should display the exception message" time="0.1676" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageHtml.Should display the fault code &amp; string" time="0.0969" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageHtml.Should return an object with all properties defined" time="0.1364" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageHtml.Should return an object with the correct value for FullName" time="0.09" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RenderedHtml" name="Get-DokuPageHtml.Should return an object with the correct value for RenderedHtml" time="0.0783" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageHtml.Should return an object with the correct value for PageName" time="0.0775" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageHtml.Should return an object with the correct value for ParentNamespace" time="0.0918" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageHtml.Should return an object with the correct value for RootNamespace" time="0.0738" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageHtml.Should return an object with all properties defined" time="0.128" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageHtml.Should return an object with the correct value for FullName" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RenderedHtml" name="Get-DokuPageHtml.Should return an object with the correct value for RenderedHtml" time="0.0768" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageHtml.Should return an object with the correct value for PageName" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageHtml.Should return an object with the correct value for ParentNamespace" time="0.0721" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageHtml.Should return an object with the correct value for RootNamespace" time="0.0737" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageHtml.Should call Invoke-DokuApiCall twice" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return a string" name="Get-DokuPageHtml.Should return a string" time="0.1099" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeOfType' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return the raw page data" name="Get-DokuPageHtml.Should return the raw page data" time="0.074" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageInfo" executed="True" result="Failure" success="False" time="1.7083" asserts="0" description="Get-DokuPageInfo">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageInfo.Should display the exception message" time="0.1694" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageInfo.Should display the fault code &amp; string" time="0.0862" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageInfo.Should return an object with all properties defined" time="0.1366" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageInfo.Should return an object with the correct value for FullName" time="0.0737" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageInfo.Should return an object with the correct value for PageName" time="0.0793" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuPageInfo.Should return an object with the correct value for Author" time="0.0783" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageInfo.Should return an object with the correct value for LastModified" time="0.07" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageInfo.Should return an object with the correct value for VersionTimestamp" time="0.0763" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageInfo.Should return an object with the correct value for ParentNamespace" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageInfo.Should return an object with the correct value for RootNamespace" time="0.0845" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageInfo.Should call Invoke-DokuApiCall once" time="0.0385" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageInfo.Should return an object with all properties defined" time="0.126" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageInfo.Should return an object with the correct value for FullName" time="0.0762" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageInfo.Should return an object with the correct value for PageName" time="0.0762" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuPageInfo.Should return an object with the correct value for Author" time="0.0755" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageInfo.Should return an object with the correct value for LastModified" time="0.0789" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageInfo.Should return an object with the correct value for VersionTimestamp" time="0.0877" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageInfo.Should return an object with the correct value for ParentNamespace" time="0.0858" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageInfo.Should return an object with the correct value for RootNamespace" time="0.0912" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageInfo.Should call Invoke-DokuApiCall twice" time="0.0404" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageLink" executed="True" result="Failure" success="False" time="1.2978" asserts="0" description="Get-DokuPageLink">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageLink.Should display the exception message" time="0.1594" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageLink.Should display the fault code &amp; string" time="0.0894" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageLink.Should return an object with all properties defined" time="0.1324" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageLink.Should return an object with the correct value for FullName" time="0.0795" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Type" name="Get-DokuPageLink.Should return an object with the correct value for Type" time="0.0787" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for TargetPageName" name="Get-DokuPageLink.Should return an object with the correct value for TargetPageName" time="0.0854" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for URL" name="Get-DokuPageLink.Should return an object with the correct value for URL" time="0.0832" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageLink.Should call Invoke-DokuApiCall once" time="0.033" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageLink.Should return an object with all properties defined" time="0.1232" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageLink.Should return an object with the correct value for FullName" time="0.0811" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Type" name="Get-DokuPageLink.Should return an object with the correct value for Type" time="0.0911" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for TargetPageName" name="Get-DokuPageLink.Should return an object with the correct value for TargetPageName" time="0.0765" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for URL" name="Get-DokuPageLink.Should return an object with the correct value for URL" time="0.0837" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageLink.Should call Invoke-DokuApiCall once" time="0.0376" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an array of two" name="Get-DokuPageLink.Should return an array of two" time="0.0636" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageList" executed="True" result="Failure" success="False" time="0.9616" asserts="0" description="Get-DokuPageList">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageList.Should display the exception message" time="0.1715" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageList.Should display the fault code &amp; string" time="0.0908" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageList.Should return an object with all properties defined" time="0.1418" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageList.Should return an object with the correct value for FullName" time="0.0884" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Revision" name="Get-DokuPageList.Should return an object with the correct value for Revision" time="0.0753" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuPageList.Should return an object with the correct value for Size" time="0.0786" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageList.Should return an object with the correct value for LastModified" time="0.0762" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageList.Should return an object with the correct value for ParentNamespace" time="0.0816" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageList.Should return an object with the correct value for RootNamespace" time="0.0797" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Pagename" name="Get-DokuPageList.Should return an object with the correct value for Pagename" time="0.0775" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageVersion" executed="True" result="Failure" success="False" time="2.116" asserts="0" description="Get-DokuPageVersion">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageVersion.Should display the exception message" time="0.1549" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageVersion.Should display the fault code &amp; string" time="0.0873" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersion.Should return an object with all properties defined" time="0.1428" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersion.Should return an object with the correct value for FullName" time="0.0824" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for User" name="Get-DokuPageVersion.Should return an object with the correct value for User" time="0.0833" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IpAddress" name="Get-DokuPageVersion.Should return an object with the correct value for IpAddress" time="0.0809" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Type" name="Get-DokuPageVersion.Should return an object with the correct value for Type" time="0.0842" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Summary" name="Get-DokuPageVersion.Should return an object with the correct value for Summary" time="0.0763" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageVersion.Should return an object with the correct value for LastModified" time="0.0734" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersion.Should return an object with the correct value for VersionTimestamp" time="0.0908" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersion.Should return an object with the correct value for PageName" time="0.069" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersion.Should return an object with the correct value for ParentNamespace" time="0.0694" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersion.Should return an object with the correct value for RootNamespace" time="0.0695" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageVersion.Should call Invoke-DokuApiCall once" time="0.028" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersion.Should return an object with all properties defined" time="0.1273" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersion.Should return an object with the correct value for FullName" time="0.0763" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for User" name="Get-DokuPageVersion.Should return an object with the correct value for User" time="0.0733" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for IpAddress" name="Get-DokuPageVersion.Should return an object with the correct value for IpAddress" time="0.0848" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Type" name="Get-DokuPageVersion.Should return an object with the correct value for Type" time="0.0827" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Summary" name="Get-DokuPageVersion.Should return an object with the correct value for Summary" time="0.0704" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageVersion.Should return an object with the correct value for LastModified" time="0.0876" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersion.Should return an object with the correct value for VersionTimestamp" time="0.0734" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersion.Should return an object with the correct value for PageName" time="0.0695" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersion.Should return an object with the correct value for ParentNamespace" time="0.0688" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersion.Should return an object with the correct value for RootNamespace" time="0.0808" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageVersion.Should call Invoke-DokuApiCall twice" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageVersionData" executed="True" result="Failure" success="False" time="1.6318" asserts="0" description="Get-DokuPageVersionData">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageVersionData.Should display the exception message" time="0.1421" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageVersionData.Should display the fault code &amp; string" time="0.0784" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionData.Should return an object with all properties defined" time="0.1161" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionData.Should return an object with the correct value for VersionTimestamp" time="0.0855" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionData.Should return an object with the correct value for FullName" time="0.0703" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RawText" name="Get-DokuPageVersionData.Should return an object with the correct value for RawText" time="0.0798" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionData.Should return an object with the correct value for PageName" time="0.0722" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionData.Should return an object with the correct value for ParentNamespace" time="0.072" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionData.Should return an object with the correct value for RootNamespace" time="0.0811" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageVersionData.Should call Invoke-DokuApiCall once" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionData.Should return an object with all properties defined" time="0.1251" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionData.Should return an object with the correct value for VersionTimestamp" time="0.085" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionData.Should return an object with the correct value for FullName" time="0.0749" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RawText" name="Get-DokuPageVersionData.Should return an object with the correct value for RawText" time="0.0754" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionData.Should return an object with the correct value for PageName" time="0.073" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionData.Should return an object with the correct value for ParentNamespace" time="0.0803" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionData.Should return an object with the correct value for RootNamespace" time="0.0863" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageVersionData.Should call Invoke-DokuApiCall twice" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return a string" name="Get-DokuPageVersionData.Should return a string" time="0.1021" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeOfType' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return the raw page data" name="Get-DokuPageVersionData.Should return the raw page data" time="0.0725" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageVersionHtml" executed="True" result="Failure" success="False" time="1.6037" asserts="0" description="Get-DokuPageVersionHtml">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageVersionHtml.Should display the exception message" time="0.1592" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageVersionHtml.Should display the fault code &amp; string" time="0.0769" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionHtml.Should return an object with all properties defined" time="0.1112" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionHtml.Should return an object with the correct value for VersionTimestamp" time="0.079" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionHtml.Should return an object with the correct value for FullName" time="0.0714" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RenderedHtml" name="Get-DokuPageVersionHtml.Should return an object with the correct value for RenderedHtml" time="0.0704" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionHtml.Should return an object with the correct value for PageName" time="0.0769" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionHtml.Should return an object with the correct value for ParentNamespace" time="0.0746" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionHtml.Should return an object with the correct value for RootNamespace" time="0.0748" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageVersionHtml.Should call Invoke-DokuApiCall once" time="0.028" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionHtml.Should return an object with all properties defined" time="0.1194" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionHtml.Should return an object with the correct value for VersionTimestamp" time="0.0786" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionHtml.Should return an object with the correct value for FullName" time="0.0826" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RenderedHtml" name="Get-DokuPageVersionHtml.Should return an object with the correct value for RenderedHtml" time="0.0675" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionHtml.Should return an object with the correct value for PageName" time="0.0769" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionHtml.Should return an object with the correct value for ParentNamespace" time="0.071" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionHtml.Should return an object with the correct value for RootNamespace" time="0.0737" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageVersionHtml.Should call Invoke-DokuApiCall twice" time="0.0443" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return a string" name="Get-DokuPageVersionHtml.Should return a string" time="0.1021" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeOfType' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return the raw page data" name="Get-DokuPageVersionHtml.Should return the raw page data" time="0.065" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuPageVersionInfo" executed="True" result="Failure" success="False" time="1.6024" asserts="0" description="Get-DokuPageVersionInfo">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuPageVersionInfo.Should display the exception message" time="0.1503" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuPageVersionInfo.Should display the fault code &amp; string" time="0.0862" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionInfo.Should return an object with all properties defined" time="0.1268" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionInfo.Should return an object with the correct value for FullName" time="0.0764" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionInfo.Should return an object with the correct value for PageName" time="0.075" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuPageVersionInfo.Should return an object with the correct value for Author" time="0.0677" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageVersionInfo.Should return an object with the correct value for LastModified" time="0.0751" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionInfo.Should return an object with the correct value for VersionTimestamp" time="0.0727" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionInfo.Should return an object with the correct value for ParentNamespace" time="0.0705" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionInfo.Should return an object with the correct value for RootNamespace" time="0.0759" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Get-DokuPageVersionInfo.Should call Invoke-DokuApiCall once" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Get-DokuPageVersionInfo.Should return an object with all properties defined" time="0.1315" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuPageVersionInfo.Should return an object with the correct value for FullName" time="0.0674" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Get-DokuPageVersionInfo.Should return an object with the correct value for PageName" time="0.0777" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuPageVersionInfo.Should return an object with the correct value for Author" time="0.076" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuPageVersionInfo.Should return an object with the correct value for LastModified" time="0.0734" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuPageVersionInfo.Should return an object with the correct value for VersionTimestamp" time="0.0733" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Get-DokuPageVersionInfo.Should return an object with the correct value for ParentNamespace" time="0.0826" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Get-DokuPageVersionInfo.Should return an object with the correct value for RootNamespace" time="0.0706" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Get-DokuPageVersionInfo.Should call Invoke-DokuApiCall twice" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuRecentChange" executed="True" result="Failure" success="False" time="1.0757" asserts="0" description="Get-DokuRecentChange">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuRecentChange.Should display the exception message" time="0.1414" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuRecentChange.Should display the fault code &amp; string" time="0.0818" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuRecentChange.Should return an object with all properties defined" time="0.1235" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuRecentChange.Should return an object with the correct value for FullName" time="0.082" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuRecentChange.Should return an object with the correct value for Author" time="0.0714" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuRecentChange.Should return an object with the correct value for LastModified" time="0.0793" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuRecentChange.Should return an object with the correct value for VersionTimestamp" time="0.0838" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return objects with all properties defined" name="Get-DokuRecentChange.Should return objects with all properties defined" time="0.1241" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuRecentChange.Should return an object with the correct value for FullName" time="0.0784" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuRecentChange.Should return an object with the correct value for Author" time="0.0704" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuRecentChange.Should return an object with the correct value for LastModified" time="0.0742" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuRecentChange.Should return an object with the correct value for VersionTimestamp" time="0.0655" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuRecentMediaChange" executed="True" result="Failure" success="False" time="1.3973" asserts="0" description="Get-DokuRecentMediaChange">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuRecentMediaChange.Should display the exception message" time="0.147" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuRecentMediaChange.Should display the fault code &amp; string" time="0.0809" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuRecentMediaChange.Should return an object with all properties defined" time="0.1323" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuRecentMediaChange.Should return an object with the correct value for FullName" time="0.0792" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Author" time="0.0817" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuRecentMediaChange.Should return an object with the correct value for LastModified" time="0.0718" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuRecentMediaChange.Should return an object with the correct value for VersionTimestamp" time="0.073" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Permissions" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Permissions" time="0.071" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Size" time="0.0822" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return objects with all properties defined" name="Get-DokuRecentMediaChange.Should return objects with all properties defined" time="0.1277" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Get-DokuRecentMediaChange.Should return an object with the correct value for FullName" time="0.0695" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Author" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Author" time="0.0785" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for LastModified" name="Get-DokuRecentMediaChange.Should return an object with the correct value for LastModified" time="0.084" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for VersionTimestamp" name="Get-DokuRecentMediaChange.Should return an object with the correct value for VersionTimestamp" time="0.0769" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Permissions" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Permissions" time="0.0716" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Get-DokuRecentMediaChange.Should return an object with the correct value for Size" time="0.0699" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuServer" executed="True" result="Failure" success="False" time="0.4008" asserts="0" description="Get-DokuServer">
        <results>
          <test-case description="Should return the currently connected server" name="Get-DokuServer.Should return the currently connected server" time="0.1511" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return true if currently connected and IsConnected is passed" name="Get-DokuServer.Should return true if currently connected and IsConnected is passed" time="0.0873" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing if not connected" name="Get-DokuServer.Should return nothing if not connected" time="0.0751" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return false if currently connected and IsConnected is passed" name="Get-DokuServer.Should return false if currently connected and IsConnected is passed" time="0.0872" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuServerApiVersion" executed="True" result="Failure" success="False" time="0.5496" asserts="0" description="Get-DokuServerApiVersion">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuServerApiVersion.Should display the exception message" time="0.1639" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuServerApiVersion.Should display the fault code &amp; string" time="0.0868" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuServerApiVersion.Should return an object with all properties defined" time="0.1306" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Server" name="Get-DokuServerApiVersion.Should return an object with the correct value for Server" time="0.0901" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for XmlRpcVersion" name="Get-DokuServerApiVersion.Should return an object with the correct value for XmlRpcVersion" time="0.0782" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuServerRpcVersionSupported" executed="True" result="Failure" success="False" time="0.5388" asserts="0" description="Get-DokuServerRpcVersionSupported">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuServerRpcVersionSupported.Should display the exception message" time="0.1665" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuServerRpcVersionSupported.Should display the fault code &amp; string" time="0.0832" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuServerRpcVersionSupported.Should return an object with all properties defined" time="0.1315" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Server" name="Get-DokuServerRpcVersionSupported.Should return an object with the correct value for Server" time="0.0746" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for MinimumRpcVersionSupported" name="Get-DokuServerRpcVersionSupported.Should return an object with the correct value for MinimumRpcVersionSupported" time="0.083" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuServerTime" executed="True" result="Failure" success="False" time="0.5944" asserts="0" description="Get-DokuServerTime">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuServerTime.Should display the exception message" time="0.1533" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuServerTime.Should display the fault code &amp; string" time="0.0759" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuServerTime.Should return an object with all properties defined" time="0.1326" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Server" name="Get-DokuServerTime.Should return an object with the correct value for Server" time="0.0786" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for UNIXTimestamp" name="Get-DokuServerTime.Should return an object with the correct value for UNIXTimestamp" time="0.0821" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ServerTime" name="Get-DokuServerTime.Should return an object with the correct value for ServerTime" time="0.0719" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuServerVersion" executed="True" result="Failure" success="False" time="0.7325" asserts="0" description="Get-DokuServerVersion">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuServerVersion.Should display the exception message" time="0.1476" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuServerVersion.Should display the fault code &amp; string" time="0.0804" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuServerVersion.Should return an object with all properties defined" time="0.141" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Server" name="Get-DokuServerVersion.Should return an object with the correct value for Server" time="0.0728" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Type" name="Get-DokuServerVersion.Should return an object with the correct value for Type" time="0.0702" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ReleaseDate" name="Get-DokuServerVersion.Should return an object with the correct value for ReleaseDate" time="0.0705" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ReleaseName" name="Get-DokuServerVersion.Should return an object with the correct value for ReleaseName" time="0.0805" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RawVersion" name="Get-DokuServerVersion.Should return an object with the correct value for RawVersion" time="0.0695" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-DokuTitle" executed="True" result="Failure" success="False" time="0.5035" asserts="0" description="Get-DokuTitle">
        <results>
          <test-case description="Should display the exception message" name="Get-DokuTitle.Should display the exception message" time="0.1503" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Get-DokuTitle.Should display the fault code &amp; string" time="0.0735" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Get-DokuTitle.Should return an object with all properties defined" time="0.1239" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Server" name="Get-DokuTitle.Should return an object with the correct value for Server" time="0.0731" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Title" name="Get-DokuTitle.Should return an object with the correct value for Title" time="0.0828" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Help tests for PSDokuWiki" executed="True" result="Failure" success="False" time="3.9967" asserts="0" description="Help tests for PSDokuWiki">
        <results>
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.5127" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Acl has a description" name="Help tests for PSDokuWiki.parameter Acl has a description" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Principal has a description" name="Help tests for PSDokuWiki.parameter Principal has a description" time="0.0253" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter MinorChange has a description" name="Help tests for PSDokuWiki.parameter MinorChange has a description" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter PassThru has a description" name="Help tests for PSDokuWiki.parameter PassThru has a description" time="0.029" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter RawWikiText has a description" name="Help tests for PSDokuWiki.parameter RawWikiText has a description" time="0.0107" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter SummaryText has a description" name="Help tests for PSDokuWiki.parameter SummaryText has a description" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0395" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.014" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter APIPath has a description" name="Help tests for PSDokuWiki.parameter APIPath has a description" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter ComputerName has a description" name="Help tests for PSDokuWiki.parameter ComputerName has a description" time="0.0148" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Credential has a description" name="Help tests for PSDokuWiki.parameter Credential has a description" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Force has a description" name="Help tests for PSDokuWiki.parameter Force has a description" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Unencrypted has a description" name="Help tests for PSDokuWiki.parameter Unencrypted has a description" time="0.0212" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter UseBasicParsing has a description" name="Help tests for PSDokuWiki.parameter UseBasicParsing has a description" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0404" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0166" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Name has a description" name="Help tests for PSDokuWiki.parameter Name has a description" time="0.0174" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Params has a description" name="Help tests for PSDokuWiki.parameter Params has a description" time="0.0166" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter CustomTypes has a description" name="Help tests for PSDokuWiki.parameter CustomTypes has a description" time="0.016" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.011" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter InputObject has a description" name="Help tests for PSDokuWiki.parameter InputObject has a description" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter CustomTypes has a description" name="Help tests for PSDokuWiki.parameter CustomTypes has a description" time="0.023" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0555" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.018" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0412" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Namespace has a description" name="Help tests for PSDokuWiki.parameter Namespace has a description" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.016" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0376" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.014" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Raw has a description" name="Help tests for PSDokuWiki.parameter Raw has a description" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0396" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Raw has a description" name="Help tests for PSDokuWiki.parameter Raw has a description" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.02" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0146" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0332" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Offset has a description" name="Help tests for PSDokuWiki.parameter Offset has a description" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0377" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0219" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Raw has a description" name="Help tests for PSDokuWiki.parameter Raw has a description" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter VersionTimestamp has a description" name="Help tests for PSDokuWiki.parameter VersionTimestamp has a description" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0122" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Raw has a description" name="Help tests for PSDokuWiki.parameter Raw has a description" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter VersionTimestamp has a description" name="Help tests for PSDokuWiki.parameter VersionTimestamp has a description" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter VersionTimestamp has a description" name="Help tests for PSDokuWiki.parameter VersionTimestamp has a description" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0407" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter VersionTimestamp has a description" name="Help tests for PSDokuWiki.parameter VersionTimestamp has a description" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.035" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter VersionTimestamp has a description" name="Help tests for PSDokuWiki.parameter VersionTimestamp has a description" time="0.0131" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0269" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter IsConnected has a description" name="Help tests for PSDokuWiki.parameter IsConnected has a description" time="0.013" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0188" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0372" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.04" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0111" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0427" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0229" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.041" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0206" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.037" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter MethodName has a description" name="Help tests for PSDokuWiki.parameter MethodName has a description" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter MethodParameters has a description" name="Help tests for PSDokuWiki.parameter MethodParameters has a description" time="0.015" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0398" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.015" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0134" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Force has a description" name="Help tests for PSDokuWiki.parameter Force has a description" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter PassThru has a description" name="Help tests for PSDokuWiki.parameter PassThru has a description" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Path has a description" name="Help tests for PSDokuWiki.parameter Path has a description" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.014" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Principal has a description" name="Help tests for PSDokuWiki.parameter Principal has a description" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0629" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: value to not be empty</message>
              <stack-trace>at line: 16 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Help.Tests.ps1
16:                 $node.description | Should Not BeNullOrEmpty
</stack-trace>
            </failure>
          </test-case>
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0287" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: value to not be empty</message>
              <stack-trace>at line: 19 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Help.Tests.ps1
19:                  $node.examples | Should Not BeNullOrEmpty
</stack-trace>
            </failure>
          </test-case>
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0241" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: value to not be empty</message>
              <stack-trace>at line: 26 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Help.Tests.ps1
26:                         $parameter.Description.text | Should Not BeNullOrEmpty
</stack-trace>
            </failure>
          </test-case>
          <test-case description="parameter SummaryText has a description" name="Help tests for PSDokuWiki.parameter SummaryText has a description" time="0.0173" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: value to not be empty</message>
              <stack-trace>at line: 26 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Help.Tests.ps1
26:                         $parameter.Description.text | Should Not BeNullOrEmpty
</stack-trace>
            </failure>
          </test-case>
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0285" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Username has a description" name="Help tests for PSDokuWiki.parameter Username has a description" time="0.015" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0403" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Force has a description" name="Help tests for PSDokuWiki.parameter Force has a description" time="0.0273" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter Path has a description" name="Help tests for PSDokuWiki.parameter Path has a description" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter SearchString has a description" name="Help tests for PSDokuWiki.parameter SearchString has a description" time="0.0209" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.039" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0162" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter MinorChange has a description" name="Help tests for PSDokuWiki.parameter MinorChange has a description" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter PassThru has a description" name="Help tests for PSDokuWiki.parameter PassThru has a description" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter RawWikiText has a description" name="Help tests for PSDokuWiki.parameter RawWikiText has a description" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter SummaryText has a description" name="Help tests for PSDokuWiki.parameter SummaryText has a description" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has a description" name="Help tests for PSDokuWiki.has a description" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="has an example" name="Help tests for PSDokuWiki.has an example" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="parameter FullName has a description" name="Help tests for PSDokuWiki.parameter FullName has a description" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Invoke-DokuApiCall" executed="True" result="Failure" success="False" time="1.7944" asserts="0" description="Invoke-DokuApiCall">
        <results>
          <test-case description="Should fail when DokuServer is NULL" name="Invoke-DokuApiCall.Should fail when DokuServer is NULL" time="0.1508" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should produce an object with the correct properties when DokuServer is NULL" name="Invoke-DokuApiCall.Should produce an object with the correct properties when DokuServer is NULL" time="0.0903" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail when target uri is unreachable" name="Invoke-DokuApiCall.Should fail when target uri is unreachable" time="0.1067" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should produce an object with the correct properties when target uri is unreachable" name="Invoke-DokuApiCall.Should produce an object with the correct properties when target uri is unreachable" time="0.0857" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should fail when target uri is reachable but invalid" name="Invoke-DokuApiCall.Should fail when target uri is reachable but invalid" time="0.4977" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should produce an object with the correct properties when target uri is reachable but invalid" name="Invoke-DokuApiCall.Should produce an object with the correct properties when target uri is reachable but invalid" time="0.4746" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should correctly identify the fault code" name="Invoke-DokuApiCall.Should correctly identify the fault code" time="0.1127" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should correctly identify the fault string" name="Invoke-DokuApiCall.Should correctly identify the fault string" time="0.0841" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should correctly catch an unspecified error" name="Invoke-DokuApiCall.Should correctly catch an unspecified error" time="0.1042" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should correctly catch a ValidationMetadataException error" name="Invoke-DokuApiCall.Should correctly catch a ValidationMetadataException error" time="0.0876" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lock-DokuPage" executed="True" result="Failure" success="False" time="0.5053" asserts="0" description="Lock-DokuPage">
        <results>
          <test-case description="Should display the exception message" name="Lock-DokuPage.Should display the exception message" time="0.1463" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Lock-DokuPage.Should display the fault code &amp; string" time="0.0841" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should throw an error" name="Lock-DokuPage.Should throw an error" time="0.1028" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw" name="Lock-DokuPage.Should not throw" time="0.1071" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should only call Invoke-DokuApiCall once" name="Lock-DokuPage.Should only call Invoke-DokuApiCall once" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="New-DokuAttachment" executed="True" result="Failure" success="False" time="1.0976" asserts="0" description="New-DokuAttachment">
        <results>
          <test-case description="Should display the exception message" name="New-DokuAttachment.Should display the exception message" time="0.1527" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="New-DokuAttachment.Should display the fault code &amp; string" time="0.0777" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="New-DokuAttachment.Should return an object with all properties defined" time="0.1398" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="New-DokuAttachment.Should return an object with the correct value for FullName" time="0.0749" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for SourceFilePath" name="New-DokuAttachment.Should return an object with the correct value for SourceFilePath" time="0.0807" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="New-DokuAttachment.Should return an object with the correct value for Size" time="0.0857" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for SourceFileLastModified" name="New-DokuAttachment.Should return an object with the correct value for SourceFileLastModified" time="0.0707" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FileName" name="New-DokuAttachment.Should return an object with the correct value for FileName" time="0.0732" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="New-DokuAttachment.Should return an object with the correct value for ParentNamespace" time="0.0691" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="New-DokuAttachment.Should return an object with the correct value for RootNamespace" time="0.0869" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="New-DokuAttachment.Should call Invoke-DokuApiCall once" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should not return anything" name="New-DokuAttachment.Should not return anything" time="0.1139" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="New-DokuAttachment.Should call Invoke-DokuApiCall once" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="PSScriptAnalyzer rule-sets" executed="True" result="Failure" success="False" time="141.7105" asserts="0" description="PSScriptAnalyzer rule-sets">
        <results>
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.248" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.1208" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.1305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0345" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0336" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.027" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0253" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0314" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0561" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.06" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: {0}
But was:  {3}</message>
              <stack-trace>at line: 17 in C:\Andrew\Work\Me\PSDokuWiki\Tests\PSDokuWiki.Tests.ps1
17:                     (Invoke-ScriptAnalyzer -Path $script.FullName -IncludeRule $rule.RuleName -Severity ParseError,ParseError,Warning).Count | Should Be 0
</stack-trace>
            </failure>
          </test-case>
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.062" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.1045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0685" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0646" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0238" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0295" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.033" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0349" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0608" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.3669" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0693" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.1065" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0626" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0426" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.023" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0291" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0266" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0249" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0273" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0295" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.04" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0596" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.1209" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.079" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.1038" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0727" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0562" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0589" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0558" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0581" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0309" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.1082" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0562" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0665" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0401" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.1019" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0374" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0332" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0685" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0278" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0335" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0298" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.025" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0385" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.2587" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0398" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0657" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.054" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0602" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0613" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.066" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.1301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0336" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0718" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0594" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0574" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0722" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.031" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0443" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0368" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.04" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0425" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0676" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0626" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0346" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0258" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0371" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0671" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0309" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0358" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0298" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.033" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0352" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0722" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="2.2018" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0642" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.034" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.038" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0379" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0703" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0401" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0649" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.9583" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0645" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0349" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.029" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.029" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.031" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0242" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.034" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0332" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0567" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0625" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.041" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0667" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0374" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0559" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0277" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.028" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.8338" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0341" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.039" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0684" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0376" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.027" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0291" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0699" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0355" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.035" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.067" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0362" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0417" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0673" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0705" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0339" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0439" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0649" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.064" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.077" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0389" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="2.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0727" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.028" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0374" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0326" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0685" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0373" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0645" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.025" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0273" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0266" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.035" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0278" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.036" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.035" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.054" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0735" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0404" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0407" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0655" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0272" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0314" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0592" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0554" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0684" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.037" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.9584" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0373" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0342" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0428" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0422" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0732" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0607" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0645" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0644" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.063" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0856" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0253" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.036" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0278" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.031" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0331" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.032" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0614" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0583" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0546" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0585" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0776" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0559" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0581" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0774" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0575" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0562" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0615" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.06" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.057" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.073" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.035" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0258" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0378" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.028" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="1.4477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0644" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0749" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0659" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0551" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0417" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0561" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0762" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0427" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0559" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0569" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0664" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0336" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0378" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0558" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.9405" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0639" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0565" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0625" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0687" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0672" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0421" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0768" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0665" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0615" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0577" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0609" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.071" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0649" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0273" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.033" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.034" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.027" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0456" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0708" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0226" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0285" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.025" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0269" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0291" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0332" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.9477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.1022" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0764" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.1378" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0346" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.032" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.069" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.064" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.025" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0335" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0359" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.7641" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0552" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0556" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0623" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0551" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0597" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.084" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0734" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.037" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.6634" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0594" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0589" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0922" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0555" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0583" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0403" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0552" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0702" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0555" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0706" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0431" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="1.4653" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0333" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0459" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.071" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="1.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.062" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0267" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.031" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0339" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0309" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0291" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.027" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.027" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0242" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0454" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0684" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="1.3906" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0429" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0718" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0251" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0249" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0326" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0298" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0242" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0266" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0594" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="1.3632" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0561" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0679" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.9256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0265" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0421" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.045" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0426" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0391" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0413" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0425" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0686" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.04" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0664" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.032" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0638" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.1544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.055" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0527" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0378" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0592" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0672" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0745" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0683" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0412" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.029" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.029" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.026" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.032" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.031" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0571" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0543" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0554" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0705" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0634" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.03" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0535" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0678" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0862" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0574" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0666" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0467" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.025" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0505" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0559" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0463" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0494" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0488" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0567" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0445" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0389" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0679" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0383" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0512" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.054" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0618" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0602" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0924" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0717" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0242" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0272" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0299" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0561" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.0714" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0356" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAlignAssignmentStatement]" name="PSScriptAnalyzer rule-sets.Rule [PSAlignAssignmentStatement]" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingCmdletAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingCmdletAliases]" time="0.0469" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidAssignmentToAutomaticVariable]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidAssignmentToAutomaticVariable]" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueSwitchParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueSwitchParameter]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidDefaultValueForMandatoryParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidDefaultValueForMandatoryParameter]" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingEmptyCatchBlock]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingEmptyCatchBlock]" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalAliases]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalAliases]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalFunctions]" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidGlobalVars]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidGlobalVars]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidInvokingEmptyMembers]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidInvokingEmptyMembers]" time="0.0501" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidLongLines]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidLongLines]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidNullOrEmptyHelpMessageAttribute]" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidOverwritingBuiltInCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidOverwritingBuiltInCmdlets]" time="0.0482" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPositionalParameters]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPositionalParameters]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedCmdletChar]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedCmdletChar]" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReservedParams]" name="PSScriptAnalyzer rule-sets.Rule [PSReservedParams]" time="0.051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidShouldContinueWithoutForce]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidShouldContinueWithoutForce]" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidTrailingWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidTrailingWhitespace]" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingUsernameAndPasswordParams]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingUsernameAndPasswordParams]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingComputerNameHardcoded]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingComputerNameHardcoded]" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingConvertToSecureStringWithPlainText]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingDeprecatedManifestFields]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingDeprecatedManifestFields]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingInvokeExpression]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingInvokeExpression]" time="0.0483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingPlainTextForPassword]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingPlainTextForPassword]" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWMICmdlet]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWMICmdlet]" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSAvoidUsingWriteHost]" name="PSScriptAnalyzer rule-sets.Rule [PSAvoidUsingWriteHost]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCommands]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCommands]" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleSyntax]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleSyntax]" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleTypes]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleTypes]" time="0.047" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMisleadingBacktick]" name="PSScriptAnalyzer rule-sets.Rule [PSMisleadingBacktick]" time="0.0486" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSMissingModuleManifestField]" name="PSScriptAnalyzer rule-sets.Rule [PSMissingModuleManifestField]" time="0.0484" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceCloseBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceCloseBrace]" time="0.0522" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPlaceOpenBrace]" name="PSScriptAnalyzer rule-sets.Rule [PSPlaceOpenBrace]" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectComparisonWithNull]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectComparisonWithNull]" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfAssignmentOperator]" time="0.0578" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" name="PSScriptAnalyzer rule-sets.Rule [PSPossibleIncorrectUsageOfRedirectionOperator]" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSProvideCommentHelp]" name="PSScriptAnalyzer rule-sets.Rule [PSProvideCommentHelp]" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSReviewUnusedParameter]" name="PSScriptAnalyzer rule-sets.Rule [PSReviewUnusedParameter]" time="0.0565" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseApprovedVerbs]" name="PSScriptAnalyzer rule-sets.Rule [PSUseApprovedVerbs]" time="0.0572" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseBOMForUnicodeEncodedFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseBOMForUnicodeEncodedFile]" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCmdletCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCmdletCorrectly]" time="0.058" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCompatibleCmdlets]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCompatibleCmdlets]" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentIndentation]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentIndentation]" time="0.05" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseConsistentWhitespace]" name="PSScriptAnalyzer rule-sets.Rule [PSUseConsistentWhitespace]" time="0.0479" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseCorrectCasing]" name="PSScriptAnalyzer rule-sets.Rule [PSUseCorrectCasing]" time="0.049" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseDeclaredVarsMoreThanAssignments]" name="PSScriptAnalyzer rule-sets.Rule [PSUseDeclaredVarsMoreThanAssignments]" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseLiteralInitializerForHashtable]" name="PSScriptAnalyzer rule-sets.Rule [PSUseLiteralInitializerForHashtable]" time="0.0572" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseOutputTypeCorrectly]" name="PSScriptAnalyzer rule-sets.Rule [PSUseOutputTypeCorrectly]" time="0.0496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseProcessBlockForPipelineCommand]" name="PSScriptAnalyzer rule-sets.Rule [PSUseProcessBlockForPipelineCommand]" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUsePSCredentialType]" name="PSScriptAnalyzer rule-sets.Rule [PSUsePSCredentialType]" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSShouldProcess]" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseShouldProcessForStateChangingFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSUseShouldProcessForStateChangingFunctions]" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSingularNouns]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSingularNouns]" time="0.048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseSupportsShouldProcess]" name="PSScriptAnalyzer rule-sets.Rule [PSUseSupportsShouldProcess]" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseToExportFieldsInManifest]" name="PSScriptAnalyzer rule-sets.Rule [PSUseToExportFieldsInManifest]" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUsingScopeModifierInNewRunspaces]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUsingScopeModifierInNewRunspaces]" time="0.0575" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSUseUTF8EncodingForHelpFile]" name="PSScriptAnalyzer rule-sets.Rule [PSUseUTF8EncodingForHelpFile]" time="0.0553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscExamplesPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscExamplesPresent]" time="0.0667" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCDscTestsPresent]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCDscTestsPresent]" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCReturnCorrectTypesForDSCFunctions]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCReturnCorrectTypesForDSCFunctions]" time="0.0476" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalMandatoryParametersForDSC]" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseIdenticalParametersForDSC]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseIdenticalParametersForDSC]" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCStandardDSCFunctionsInResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCStandardDSCFunctionsInResource]" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Rule [PSDSCUseVerboseMessageInDSCResource]" name="PSScriptAnalyzer rule-sets.Rule [PSDSCUseVerboseMessageInDSCResource]" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="General project validation: PSDokuWiki" executed="True" result="Success" success="True" time="0.2716" asserts="0" description="General project validation: PSDokuWiki">
        <results>
          <test-case description="Module 'PSDokuWiki' can import cleanly" name="General project validation: PSDokuWiki.Module 'PSDokuWiki' can import cleanly" time="0.2716" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Remove-DokuAclRule" executed="True" result="Failure" success="False" time="0.8992" asserts="0" description="Remove-DokuAclRule">
        <results>
          <test-case description="Should display the exception message" name="Remove-DokuAclRule.Should display the exception message" time="0.1455" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Remove-DokuAclRule.Should display the fault code &amp; string" time="0.0863" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuAclRule.Should return nothing" time="0.11" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAclRule.Should not throw with ErrorAction Stop" time="0.0829" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuAclRule.Should return nothing" time="0.1101" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAclRule.Should not throw with ErrorAction Stop" time="0.0778" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuAclRule.Should call Invoke-DokuApiCall twice" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return nothing" name="Remove-DokuAclRule.Should return nothing" time="0.1227" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAclRule.Should not throw with ErrorAction Stop" time="0.0745" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall four times" name="Remove-DokuAclRule.Should call Invoke-DokuApiCall four times" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Remove-DokuAttachment" executed="True" result="Failure" success="False" time="0.8365" asserts="0" description="Remove-DokuAttachment">
        <results>
          <test-case description="Should display the exception message" name="Remove-DokuAttachment.Should display the exception message" time="0.1387" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Remove-DokuAttachment.Should display the fault code &amp; string" time="0.0797" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuAttachment.Should return nothing" time="0.1078" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAttachment.Should not throw with ErrorAction Stop" time="0.0647" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuAttachment.Should return nothing" time="0.1164" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAttachment.Should not throw with ErrorAction Stop" time="0.075" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuAttachment.Should call Invoke-DokuApiCall twice" time="0.0353" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return nothing" name="Remove-DokuAttachment.Should return nothing" time="0.11" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuAttachment.Should not throw with ErrorAction Stop" time="0.0671" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuAttachment.Should call Invoke-DokuApiCall twice" time="0.0419" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Remove-DokuPage" executed="True" result="Failure" success="False" time="0.4394" asserts="0" description="Remove-DokuPage">
        <results>
          <test-case description="Should display the exception message" name="Remove-DokuPage.Should display the exception message" time="0.0846" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>A parameter cannot be found that matches parameter name 'PassThru'.</message>
              <stack-trace>at line: 13 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Remove-DokuPage.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Remove-DokuPage.Should display the fault code &amp; string" time="0.0337" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>A parameter cannot be found that matches parameter name 'PassThru'.</message>
              <stack-trace>at line: 26 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Remove-DokuPage.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should generate an error" name="Remove-DokuPage.Should generate an error" time="0.0599" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>A parameter cannot be found that matches parameter name 'PassThru'.</message>
              <stack-trace>at line: 42 in C:\Andrew\Work\Me\PSDokuWiki\Tests\Remove-DokuPage.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw" name="Remove-DokuPage.Should not throw" time="0.0992" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not return anything" name="Remove-DokuPage.Should not return anything" time="0.0822" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuPage.Should call Invoke-DokuApiCall twice" time="0.0797" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Remove-DokuUser" executed="True" result="Failure" success="False" time="0.8346" asserts="0" description="Remove-DokuUser">
        <results>
          <test-case description="Should display the exception message" name="Remove-DokuUser.Should display the exception message" time="0.1387" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Remove-DokuUser.Should display the fault code &amp; string" time="0.0818" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuUser.Should return nothing" time="0.1047" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuUser.Should not throw with ErrorAction Stop" time="0.0658" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return nothing" name="Remove-DokuUser.Should return nothing" time="0.1129" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuUser.Should not throw with ErrorAction Stop" time="0.0781" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuUser.Should call Invoke-DokuApiCall twice" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return nothing" name="Remove-DokuUser.Should return nothing" time="0.1061" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw with ErrorAction Stop" name="Remove-DokuUser.Should not throw with ErrorAction Stop" time="0.0722" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Remove-DokuUser.Should call Invoke-DokuApiCall twice" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Save-DokuAttachment" executed="True" result="Failure" success="False" time="0.5881" asserts="0" description="Save-DokuAttachment">
        <results>
          <test-case description="Should display the exception message" name="Save-DokuAttachment.Should display the exception message" time="0.1571" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Save-DokuAttachment.Should display the fault code &amp; string" time="0.0818" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object of type System.IO.FileInfo" name="Save-DokuAttachment.Should return an object of type System.IO.FileInfo" time="0.1158" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeOfType' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return the exact object requested" name="Save-DokuAttachment.Should return the exact object requested" time="0.1154" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Save-DokuAttachment.Should call Invoke-DokuApiCall once" time="0.0227" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should throw an error" name="Save-DokuAttachment.Should throw an error" time="0.0954" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Search-DokuWiki" executed="True" result="Failure" success="False" time="18.1846" asserts="0" description="Search-DokuWiki">
        <results>
          <test-case description="Should display the exception message" name="Search-DokuWiki.Should display the exception message" time="0.154" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Search-DokuWiki.Should display the fault code &amp; string" time="0.0688" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with all properties defined" name="Search-DokuWiki.Should return an object with all properties defined" time="16.8895" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Search-DokuWiki.Should return an object with the correct value for FullName" time="0.084" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Score" name="Search-DokuWiki.Should return an object with the correct value for Score" time="0.0732" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Revision" name="Search-DokuWiki.Should return an object with the correct value for Revision" time="0.0796" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ModifiedTime" name="Search-DokuWiki.Should return an object with the correct value for ModifiedTime" time="0.0721" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Size" name="Search-DokuWiki.Should return an object with the correct value for Size" time="0.0772" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Snippet" name="Search-DokuWiki.Should return an object with the correct value for Snippet" time="0.0865" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for Title" name="Search-DokuWiki.Should return an object with the correct value for Title" time="0.0921" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Search-DokuWiki.Should return an object with the correct value for PageName" time="0.0681" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Search-DokuWiki.Should return an object with the correct value for ParentNamespace" time="0.0832" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Search-DokuWiki.Should return an object with the correct value for RootNamespace" time="0.0712" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Search-DokuWiki.Should call Invoke-DokuApiCall once" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return nothing" name="Search-DokuWiki.Should return nothing" time="0.1065" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall once" name="Search-DokuWiki.Should call Invoke-DokuApiCall once" time="0.0295" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should call Invoke-DokuApiCall twice" name="Search-DokuWiki.Should call Invoke-DokuApiCall twice" time="0.0589" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should call Invoke-DokuApiCall twice" name="Search-DokuWiki.Should call Invoke-DokuApiCall twice" time="0.0654" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Set-DokuPageData" executed="True" result="Failure" success="False" time="1.2309" asserts="0" description="Set-DokuPageData">
        <results>
          <test-case description="Should display the exception message" name="Set-DokuPageData.Should display the exception message" time="0.1526" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Set-DokuPageData.Should display the fault code &amp; string" time="0.0764" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should generate an error" name="Set-DokuPageData.Should generate an error" time="0.1146" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw" name="Set-DokuPageData.Should not throw" time="0.1209" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not return anything" name="Set-DokuPageData.Should not return anything" time="0.0795" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should call Invoke-DokuApiCall twice" name="Set-DokuPageData.Should call Invoke-DokuApiCall twice" time="0.0752" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should return an object with all properties defined" name="Set-DokuPageData.Should return an object with all properties defined" time="0.1165" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-BeNullOrEmpty' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for FullName" name="Set-DokuPageData.Should return an object with the correct value for FullName" time="0.0762" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for AddedText" name="Set-DokuPageData.Should return an object with the correct value for AddedText" time="0.0738" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for MinorChange" name="Set-DokuPageData.Should return an object with the correct value for MinorChange" time="0.0659" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for SummaryText" name="Set-DokuPageData.Should return an object with the correct value for SummaryText" time="0.0698" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for PageName" name="Set-DokuPageData.Should return an object with the correct value for PageName" time="0.07" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for ParentNamespace" name="Set-DokuPageData.Should return an object with the correct value for ParentNamespace" time="0.0666" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should return an object with the correct value for RootNamespace" name="Set-DokuPageData.Should return an object with the correct value for RootNamespace" time="0.0728" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Unlock-DokuPage" executed="True" result="Failure" success="False" time="0.5521" asserts="0" description="Unlock-DokuPage">
        <results>
          <test-case description="Should display the exception message" name="Unlock-DokuPage.Should display the exception message" time="0.1561" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should display the fault code &amp; string" name="Unlock-DokuPage.Should display the fault code &amp; string" time="0.0759" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Be' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should throw an error" name="Unlock-DokuPage.Should throw an error" time="0.0939" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Throw' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should not throw" name="Unlock-DokuPage.Should not throw" time="0.0952" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>'-Not' is not a valid Should operator.</message>
              <stack-trace>at line: 42 in C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\Assertions\Should.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Should only call Invoke-DokuApiCall once" name="Unlock-DokuPage.Should only call Invoke-DokuApiCall once" time="0.0644" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Should call Invoke-DokuApiCall twice" name="Unlock-DokuPage.Should call Invoke-DokuApiCall twice" time="0.0664" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>